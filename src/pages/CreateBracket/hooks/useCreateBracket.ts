import { Dispatch, SetStateAction, useState } from 'react';
import { CreateBracketInputsT, TemplateTypeT } from '../types';
import { useMutation, useQuery } from 'react-query';
import { api } from '~api';
import { SubmitHandler } from 'react-hook-form';
import { v4 as uuidv4 } from 'uuid';
import { getAutogenerateData } from '~services/autogenerate';
import { IBracket } from 'interfaces/bracket.interface';
import { useNavigate } from 'react-router-dom';
import { BracketSorter } from '~services/BracketSort';

type OptionT = { id: string; label: string };

type useCreateBracketResult = {
	isShowLoader: boolean;
	templateType: TemplateTypeT;
	setTemplateType: Dispatch<SetStateAction<TemplateTypeT>>;
	isMakeDuplicate: boolean;
	setIsMakeDuplicate: Dispatch<SetStateAction<boolean>>;
	bracketsOption: OptionT[];
	submitHandler: SubmitHandler<CreateBracketInputsT>;
};

export const useCreateBracket = (): useCreateBracketResult => {
	const [templateType, setTemplateType] = useState<TemplateTypeT>('new_bracket');
	const [isMakeDuplicate, setIsMakeDuplicate] = useState(false);
	const [bracketsOption, setBracketsOption] = useState<OptionT[]>([]);
	const [brackets, setBrackets] = useState<IBracket[]>([]);

	const navigate = useNavigate();

	const { isLoading } = useQuery('brackets', () => api.fetchBrackets(), {
		onSuccess: (data) => {
			setBrackets(data);
			setBracketsOption(data.map((bracket) => ({ id: bracket.id, label: bracket.name })));
		},
	});

	const createBracketMutation = useMutation((bracket: Omit<IBracket, 'id'>) => api.createBracket(bracket), {
		onSuccess: (bracket) => {
			navigate(`/brackets/${bracket.id}`);
		},
	});

	const submitHandler: SubmitHandler<CreateBracketInputsT> = (data) => {
		if (templateType === 'new_bracket') {
			const { isThirdPlace, isFifthPlace, isHigherSeedsTeamsLogic, isRightSide, countOfTeams, bracketName } = data;

			const arrayOfLoserMatches = [isThirdPlace ? 3 : null, isFifthPlace ? 5 : null].filter(Boolean) as number[];

			const { rounds, matches, loserColumns } = getAutogenerateData(Number(countOfTeams), arrayOfLoserMatches, data.isRightSide);

			const bracketSorter = new BracketSorter({ matches, numTeams: Number(countOfTeams) });

			const generatedBracket = {
				id: uuidv4(),
				name: bracketName,
				created_at: Date.now(),
				updated_at: Date.now(),
				columns: rounds.concat(loserColumns),
				matches: bracketSorter.sortBracket(),
				isLoser3dMatch: isThirdPlace,
				isLoser5dMatch: isFifthPlace,
				isHigherSeedsTeamsLogic: isHigherSeedsTeamsLogic,
				cancelationMatchesAreRight: isRightSide || false,
			};
			createBracketMutation.mutate(generatedBracket);
		}
		if (templateType === 'saved_brackets') {
			const { duplicateName, selectedSavedBracket } = data;
			const currentBracket = brackets.find((bracket) => bracket.name === selectedSavedBracket);
			if (!currentBracket) {
				return;
			}
			if (!duplicateName) {
				navigate(`/brackets/${currentBracket.id}`);
			} else {
				const generatedBracket = {
					...currentBracket,
					id: uuidv4(),
					name: duplicateName,
				};
				createBracketMutation.mutate(generatedBracket);
			}
		}
	};

	return {
		templateType,
		setTemplateType,
		isMakeDuplicate,
		setIsMakeDuplicate,
		bracketsOption,
		submitHandler,
		isShowLoader: createBracketMutation.isLoading || isLoading,
	};
};
